[gd_scene load_steps=3 format=3 uid="uid://bgmb47x40xceq"]

[sub_resource type="GDScript" id="GDScript_4jsyf"]
script/source = "extends Control

var dialogue_data = []
var matched_row = []
var matched_index = -1
@onready var dialogue_box = $CanvasLayer/DialogueBox
@onready var dialogue_text = $CanvasLayer/DialogueBox/DialogueText
@onready var npc_icon = $CanvasLayer/DialogueBox/CharIcon
@onready var next_button = $CanvasLayer/DialogueBox/Button_Next

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	load_csv_dialogue_data()
	
	# Connect the \"pressed\" signal to the handler function
	next_button.connect(\"pressed\", Callable(self, \"_on_button_next_pressed\"))

	var dialogue_area1 = get_node(\"/root/Scene_NavMap_StartGame/Activator1_Area2D\")  # Change the path accordingly
	if dialogue_area1:
		dialogue_area1.player_near_frog.connect(_on_player_at_dialogue_area1)
		print(\"Connected to dialogue_area1 signal\")


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass

func _on_player_at_dialogue_area1():
	print(\"do_dialogue_trigger_action(testtrigger1)\")
	do_dialogue_trigger_action(\"testtrigger1\")

# Regular function to handle the button press signal
func _on_button_next_pressed() -> void:
	print(\"Button pressed!\")
	
	# Call the dialogue function to continue the process
	# If waiting on the button press, you'll handle the flow in do_dialogue_trigger_action
	dialogue_box.hide()  # Hide dialogue box until next step (for example)

# Function to load dialogue data from the CSV
func load_csv_dialogue_data():
	var file = FileAccess.open(\"res://assets/UI/dialogue/dialogue.csv\", FileAccess.READ)
	if not file:
		print(\"Failed to open CSV file!\")
		return
	
	var first_line = true
	while not file.eof_reached():
		var line = file.get_line()
		if first_line:  # Skip header lines
			first_line = false
			continue

		var data_line = line.split(\",\")  # Splitting by comma
		print(data_line)
		if data_line.size() < 4:
			continue  # Ignore malformed lines (like at end of file)

		var trigger = data_line[0]
		var character = data_line[1]
		var dialogue_text = data_line[2]
		var next_action = data_line[3]

		# Store dialogue in list of tuples
		dialogue_data.append([trigger, character, dialogue_text, next_action])

	file.close()
	print(dialogue_data)  # Debugging to check if it loaded correctly

# Function to trigger dialogue and wait for button presses before advancing
func do_dialogue_trigger_action(trigger: String) -> void:
	# Search through each row in dialogue_data to find trigger's row
	matched_row = []
	matched_index = -1
	for i in range(dialogue_data.size()):
		if dialogue_data[i][0] == trigger:
			matched_row = dialogue_data[i]
			matched_index = i
			break
	
	if matched_row == []:
		print(\"No dialogue found for trigger:\", trigger)
		return
	
	var expected_end = true
	while expected_end:
		if matched_row[3].to_lower() != \"yes\":
			expected_end = false
			dialogue_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(\"res://assets/UI/%s.png\" % matched_row[1])
			next_button.text = \"Done.\"
			dialogue_box.show()
			# Call the next action (await the button press before continuing)
			await wait_for_button_press()
			dialogue_box.hide()
		else:
			dialogue_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(\"res://assets/UI/%s.png\" % matched_row[1])
			next_button.text = \"Next...\"
			dialogue_box.show()
			# Call the next action (await the button press before continuing)
			await wait_for_button_press()
			matched_index += 1
			
			# Check if index is within bounds
			if matched_index < dialogue_data.size():
				do_dialogue_next_action(matched_index)
			else:
				print(\"Reached end of dialogue data.\")
				expected_end = false  # Stop loop if out of bounds

# Helper function to wait for the button press (using await instead of yield)
func wait_for_button_press() -> void:
	# Await until the button press signal is triggered
	await next_button.pressed
	print(\"Proceeding to next dialogue...\")

# Function to populate the dialogue box with the next row's data
func do_dialogue_next_action(index: int):
	matched_row = dialogue_data[index]
	dialogue_text.text = matched_row[2]  # Set dialogue text
	npc_icon.texture = load(\"res://path_to_character_icons/%s.png\" % matched_row[1])  # Example loading character icon
"

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_ct7gv"]

[node name="DialogueBox" type="Control"]
layout_mode = 3
anchors_preset = 0
script = SubResource("GDScript_4jsyf")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="DialogueBox" type="Panel" parent="CanvasLayer"]
visible = false
offset_left = 128.0
offset_top = 512.0
offset_right = 1152.0
offset_bottom = 720.0

[node name="DialogueText" type="RichTextLabel" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 272.0
offset_top = 16.0
offset_right = -40.0
offset_bottom = -80.0
theme_override_font_sizes/normal_font_size = 26
text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."

[node name="CharIcon" type="TextureRect" parent="CanvasLayer/DialogueBox"]
layout_mode = 0
offset_left = 16.0
offset_top = 16.0
offset_right = 240.0
offset_bottom = 192.0
texture = SubResource("PlaceholderTexture2D_ct7gv")
expand_mode = 2
stretch_mode = 5

[node name="Button_Next" type="Button" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.75
anchor_top = 0.654
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -6.10352e-05
offset_top = -0.0320129
offset_right = -64.0
offset_bottom = -24.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 27
text = "Next..."

[connection signal="pressed" from="CanvasLayer/DialogueBox/Button_Next" to="." method="_on_button_next_pressed"]
