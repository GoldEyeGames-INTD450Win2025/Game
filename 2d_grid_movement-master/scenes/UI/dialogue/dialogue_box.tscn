[gd_scene load_steps=3 format=3 uid="uid://bgmb47x40xceq"]

[sub_resource type="GDScript" id="GDScript_4jsyf"]
script/source = "extends Control
var textfile = \"res://dialogue.txt\"
var dialogue_data = []
var matched_row = []
var matched_index = -1
var num_of_columns = 5
@onready var dialogue_box = $CanvasLayer/DialogueBox
@onready var dialoguebox_text = $CanvasLayer/DialogueBox/DialogueText
@onready var npc_icon = $CanvasLayer/DialogueBox/CharIcon
var location_UI_icons = \"res://scenes/UI/dialogue/%s.png\"
@onready var next_button = $CanvasLayer/DialogueBox/Button_Next
@onready var player_sprite = $/root/Map_Danic/Player_Char2D/AnimatedSprite2D
@onready var transition_time = 6.0

@onready var cutscene_holder : Control = $/root/Map_Danic/Player_Char2D/MainUI/CutsceneHolder
var cutscene_called = \"\"

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	#if player_sprite.material:
		#player_sprite.material.set(\"shader_parameter/DissolveValue\", 0)
	
	load_csv_dialogue_data()
	
	var zone_Activator1_Area2D = get_node(\"/root/Map_Danic/Activator1_Area2D\")  # Adjust path as needed
	if zone_Activator1_Area2D:
		zone_Activator1_Area2D.player_near_Activator1_Area2D.connect(_on_player_nearby_Activator1)
		print(\"Connected to dialogue signal: Activator1_Area2D\")
	var zone_Activator2_Area2D = get_node(\"/root/Map_Danic/Activator2_Area2D\")  # Adjust path as needed
	if zone_Activator2_Area2D:
		zone_Activator2_Area2D.player_near_Activator2_Area2D.connect(_on_player_nearby_Activator2)
		print(\"Connected to dialogue signal: Activator2_Area2D\")
	var zone_Activator3_Area2D = get_node(\"/root/Map_Danic/Activator3_Area2D\")  # Adjust path as needed
	if zone_Activator3_Area2D:
		zone_Activator3_Area2D.player_near_Activator3_Area2D.connect(_on_player_nearby_Activator3)
		print(\"Connected to dialogue signal: Activator3_Area2D\")
		
	var zone_PlayerAtPiece1 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece1_Area2D\")  # Adjust path as needed
	if zone_PlayerAtPiece1:
		zone_PlayerAtPiece1.player_near_ActivatorPiece1_Area2D.connect(_on_player_at_Piece1)
		print(\"Connected to signal: player_near_ActivatorPiece1_Area2D _on_player_at_Piece1\")
		
	var zone_PlayerAtPiece2 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece2_Area2D\")  # Adjust path as needed
	if zone_PlayerAtPiece2:
		zone_PlayerAtPiece2.player_near_ActivatorPiece2_Area2D.connect(_on_player_at_Piece2)
		print(\"Connected to signal: player_near_ActivatorPiece2_Area2D\")
	var zone_PlayerAtPiece3 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece3_Area2D\")  # Adjust path as needed
	if zone_PlayerAtPiece3:
		zone_PlayerAtPiece3.player_near_ActivatorPiece3_Area2D.connect(_on_player_at_Piece3)
		print(\"Connected to signal: player_near_ActivatorPiece3_Area2D\")
		
func _on_player_nearby_Activator1():
	print(\"do_dialogue_trigger_action(testtrigger1)\")
	do_dialogue_trigger_action(\"testtrigger1\")
	# do material phase effect from shader, use tween to change parameter
	var tween = get_tree().create_tween()
	tween.tween_property(player_sprite.material, \"shader_parameter/DissolveValue\", 1, transition_time).set_trans(Tween.TRANS_LINEAR)

func _on_player_nearby_Activator2():
	print(\"do_dialogue_trigger_action(testtrigger2)\")
	do_dialogue_trigger_action(\"testtrigger2\")

func _on_player_nearby_Activator3():
	print(\"do_dialogue_trigger_action(testtrigger3)\")
	do_dialogue_trigger_action(\"testtrigger3\")
	
func _on_player_at_Piece1():
	print(\"do_dialogue_trigger_action(testtrigger4)\")
	do_dialogue_trigger_action(\"testtrigger4\")

func _on_player_at_Piece2():
	print(\"do_dialogue_trigger_action(testtrigger5)\")
	do_dialogue_trigger_action(\"testtrigger5\")
func _on_player_at_Piece3():
	print(\"do_dialogue_trigger_action(testtrigger6)\")
	do_dialogue_trigger_action(\"testtrigger6\")
	
# Regular function to handle the button press signal
func _on_button_next_pressed() -> void:
	print(\"Button pressed!\")
	# Call the dialogue function to continue the process
	# If waiting on the button press, you'll handle the flow in do_dialogue_trigger_action
	dialogue_box.hide()  # Hide dialogue box until next step (for example)

# Function to load dialogue data from the CSV
func load_csv_dialogue_data():
	var file = FileAccess.open(textfile, FileAccess.READ)
	print(\"opening file at:\" + str(textfile))
	if not file:
		print(\"Failed to open CSV file!\")
		return
	
	var first_line = true
	while not file.eof_reached():
		var line = file.get_line()
		if first_line:  # Skip header line
			var thisdata_line = line.split(\";\")
			num_of_columns = thisdata_line.size()
			first_line = false
			continue

		var data_line = line.split(\";\")  # Splitting by comma
		print(data_line)
		if data_line.size() < num_of_columns:
			continue  # Ignore malformed lines (like at end of file)

		var trigger = data_line[0]
		var character = data_line[1]
		var dialogue_text = data_line[2]
		var next_action = data_line[3]
		var cutscene_tag = data_line[4]

		# Store dialogue in list of tuples
		dialogue_data.append([trigger, character, dialogue_text, next_action, cutscene_tag])

	file.close()
	print(dialogue_data)  # Debugging to check if it loaded correctly

# Function to trigger dialogue and wait for button presses before advancing
func do_dialogue_trigger_action(trigger: String) -> void:
	# Search through each row in dialogue_data to find trigger's row
	matched_row = []
	matched_index = -1
	for i in range(dialogue_data.size()):
		if dialogue_data[i][0] == trigger:
			matched_row = dialogue_data[i]
			matched_index = i
			break
	
	if matched_row == []:
		print(\"No dialogue found for trigger:\", trigger)
		return
	
	var expected_end = true
	while expected_end:
		if matched_row[3].to_lower() != \"yes\":
			expected_end = false
			dialoguebox_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(location_UI_icons % matched_row[1])
			next_button.text = \"Done.\"
			#Engine.time_scale = 0 # Freeze game logic
			#if matched_row[4].to_lower() != \"\":
				#cutscene_called = matched_row[4]
				#cutscene_holder.start_cutscene()
			dialogue_box.show()
			# Call the next action (await the button press before continuing)
			await wait_for_button_press()
			#wait_for_button_press()
			dialogue_box.hide()
			if cutscene_called != \"\":
				cutscene_called = \"\"
				cutscene_holder.stop_cutscene()
			#Engine.time_scale = 1 # unFreeze game logic
		else:
			dialoguebox_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(location_UI_icons % matched_row[1])
			next_button.text = \"Next...\"
			#Engine.time_scale = 0 # Freeze game logic
			if matched_row[4].to_lower() != \"\":
				cutscene_called = matched_row[4]
				cutscene_holder.start_cutscene(cutscene_called)
			dialogue_box.show()
			# Call the next action (await the button press before continuing)
			await wait_for_button_press()
			#wait_for_button_press()
			matched_index += 1
			
			# Check if index is within bounds
			if matched_index < dialogue_data.size():
				do_dialogue_next_action(matched_index)
			else:
				print(\"Reached end of dialogue data.\")
				expected_end = false  # Stop loop if out of bounds

# Helper function to wait for the button press (using await instead of yield)
func wait_for_button_press() -> void:
	# Await until the button press signal is triggered
	await (next_button.pressed)
	##await (next_button.pressed or Input.is_key_pressed(KEY_N))
	#while true:
		#if next_button.pressed:
			#break
		#elif Input.is_key_pressed(KEY_N):
			#break
	print(\"Proceeding to: next dialogue, or Done\")

# Function to populate the dialogue box with the next row's data
func do_dialogue_next_action(index: int):
	matched_row = dialogue_data[index]
	dialoguebox_text.text = matched_row[2]  # Set dialogue text
	npc_icon.texture = load(location_UI_icons % matched_row[1])
"

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_ct7gv"]

[node name="DialogueBox" type="Control"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_4jsyf")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="DialogueBox" type="Panel" parent="CanvasLayer"]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -512.0
offset_top = -208.0
offset_right = 512.0
grow_horizontal = 2
grow_vertical = 0

[node name="DialogueText" type="RichTextLabel" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 272.0
offset_top = 16.0
offset_right = -40.0
offset_bottom = -80.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/normal_font_size = 26
theme_override_font_sizes/bold_font_size = 26
bbcode_enabled = true
text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."

[node name="CharIcon" type="TextureRect" parent="CanvasLayer/DialogueBox"]
layout_mode = 0
offset_left = 16.0
offset_top = 16.0
offset_right = 240.0
offset_bottom = 192.0
texture = SubResource("PlaceholderTexture2D_ct7gv")
expand_mode = 2
stretch_mode = 5

[node name="Button_Next" type="Button" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.75
anchor_top = 0.654
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -6.10352e-05
offset_top = -0.0320129
offset_right = -64.0
offset_bottom = -24.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 27
text = "Next..."

[connection signal="pressed" from="CanvasLayer/DialogueBox/Button_Next" to="." method="_on_button_next_pressed"]
