[gd_scene load_steps=7 format=3 uid="uid://bgmb47x40xceq"]

[ext_resource type="FontFile" uid="uid://cgjxxygb2v5k1" path="res://assets/font_free/Times New Roman MT Condensed Regular.otf" id="1_c2vmq"]
[ext_resource type="FontFile" uid="uid://bl45x80hpnqyq" path="res://assets/font_free/Times New Roman MT Condensed Italic.otf" id="2_smiwi"]

[sub_resource type="GDScript" id="GDScript_4jsyf"]
script/source = "extends Control
var textfile = \"res://dialogue.txt\"
var dialogue_data = []
var matched_row = []
var matched_index = -1
var num_of_columns = 5
@onready var dialogue_box = $CanvasLayer/DialogueBox
@onready var dialoguebox_text = $CanvasLayer/DialogueBox/DialogueText
@onready var npc_icon = $CanvasLayer/DialogueBox/CharIcon
var location_UI_icons = \"res://scenes/UI/dialogue/%s.png\"
@onready var next_button = $CanvasLayer/DialogueBox/Button_Next
@onready var player_sprite = get_tree().current_scene.get_node(\"Player_Char2D/AnimatedSprite2D\")
@onready var transition_time = 6.0

@onready var cutscene_holder = get_parent().get_node(\"CutsceneHolder\")
var cutscene_called = \"\"

var lvlend_transition1
var lvlend_transition2
var lvlend_transition3
var lvlend_transition_final1
var lvlend_transition_final2
var lvlend = \"\"

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	load_csv_dialogue_data()
	
	var root_name = get_tree().current_scene.name
	print(root_name)

	#lvl1 oasis stuff readying
	if root_name == \"Map_Danic\":
		lvlend_transition1 = $/root/Map_Danic/Player_Char2D/LvlTransitionOut1
		var zone_Activator1_Area2D = get_node(\"/root/Map_Danic/Activator1_Area2D\")
		if zone_Activator1_Area2D:
			zone_Activator1_Area2D.player_near_Activator1_Area2D.connect(_on_player_nearby_Activator1)
			print(\"Connected to dialogue signal: Activator1_Area2D\")
		var zone_Activator2_Area2D = get_node(\"/root/Map_Danic/Activator2_Area2D\")
		if zone_Activator2_Area2D:
			zone_Activator2_Area2D.player_near_Activator2_Area2D.connect(_on_player_nearby_Activator2)
			print(\"Connected to dialogue signal: Activator2_Area2D\")
		var zone_Activator3_Area2D = get_node(\"/root/Map_Danic/Activator3_Area2D\")
		if zone_Activator3_Area2D:
			zone_Activator3_Area2D.player_near_Activator3_Area2D.connect(_on_player_nearby_Activator3)
			print(\"Connected to dialogue signal: Activator3_Area2D\")
		var zone_PlayerAtPiece1 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece1_Area2D\")
		if zone_PlayerAtPiece1:
			zone_PlayerAtPiece1.player_near_ActivatorPiece1_Area2D.connect(_on_player_at_Piece1)
			print(\"Connected to signal: player_near_ActivatorPiece1_Area2D _on_player_at_Piece1\")
		var zone_PlayerAtPiece2 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece2_Area2D\")
		if zone_PlayerAtPiece2:
			zone_PlayerAtPiece2.player_near_ActivatorPiece2_Area2D.connect(_on_player_at_Piece2)
			print(\"Connected to signal: player_near_ActivatorPiece2_Area2D\")
		var zone_PlayerAtPiece3 = get_node_or_null(\"/root/Map_Danic/ActivatorPiece3_Area2D\")
		if zone_PlayerAtPiece3:
			zone_PlayerAtPiece3.player_near_ActivatorPiece3_Area2D.connect(_on_player_at_Piece3)
			print(\"Connected to signal: player_near_ActivatorPiece3_Area2D\")
		var zone_PlayerBeatLvl1 = get_node_or_null(\"/root/Map_Danic/TileMapLayer2/Obstacles_Mural_Finished/Area2D\")
		if zone_PlayerBeatLvl1:
			zone_PlayerBeatLvl1.player_in_lvl1_finished_mural.connect(_on_player_at_Lvl1end)
			print(\"Connected to signal: player_in_lvl1_finished_mural\")


	#lvl2 fire lake sokar stuff readying
	elif root_name == \"Map_Danic2\":
		lvlend_transition2 = $/root/Map_Danic2/Player_Char2D/LvlTransitionOut2
		var zone_lvl2_A1 = get_node(\"/root/Map_Danic2/Map2_A1\")
		if zone_lvl2_A1:
			zone_lvl2_A1.player_near_Activator1_Area2D.connect(_on_player_near_lvl2_A1)
			print(\"Connected to dialogue signal: zone_lvl2_A1\")
		var zone_lvl2_AP1 = get_node(\"/root/Map_Danic2/ActivatorPiece1_Area2D\")
		if zone_lvl2_AP1:
			zone_lvl2_AP1.player_near_ActivatorPiece1_Area2D.connect(_on_player_near_lvl2_AP1)
			print(\"Connected to dialogue signal: zone_lvl2_AP1\")
		var zone_lvl2_AP2 = get_node(\"/root/Map_Danic2/ActivatorPiece2_Area2D\")
		if zone_lvl2_AP2:
			zone_lvl2_AP2.player_near_ActivatorPiece2_Area2D.connect(_on_player_near_lvl2_AP2)
			print(\"Connected to dialogue signal: zone_lvl2_AP2\")
		var zone_lvl2_AP3 = get_node(\"/root/Map_Danic2/ActivatorPiece3_Area2D\")
		if zone_lvl2_AP3:
			zone_lvl2_AP3.player_near_ActivatorPiece3_Area2D.connect(_on_player_near_lvl2_AP3)
			print(\"Connected to dialogue signal: zone_lvl2_AP3\")
		var zone_lvl2_end = get_node(\"/root/Map_Danic2/TileMapLayer2/Obstacles_Mural_Finished/Area2D\")
		if zone_lvl2_end:
			zone_lvl2_end.player_in_lvl2_finished_mural.connect(_on_player_near_lvl2_end)
			print(\"Connected to dialogue signal: zone_lvl2_end\")


	#lvl3 coast island stuff readying
	elif root_name == \"Map3\":
		lvlend_transition3 = $/root/Map3/Player_Char2D/LvlTransitionOut3
		var zone_lvl3_A1 = get_node(\"/root/Map3/Lvl3Activators/A1_Start\")
		if zone_lvl3_A1:
			zone_lvl3_A1.player_near_lvl3_A1.connect(_on_player_near_lvl3_A1)
			print(\"Connected to dialogue signal: zone_lvl3_A1\")
		var zone_lvl3_AP1 = get_node(\"/root/Map3/Lvl3Activators/APiece1\")
		if zone_lvl3_AP1:
			zone_lvl3_AP1.player_near_lvl3_AP1.connect(_on_player_near_lvl3_AP1)
			print(\"Connected to dialogue signal: zone_lvl3_AP1\")
		var zone_lvl3_AP2 = get_node(\"/root/Map3/Lvl3Activators/APiece2\")
		if zone_lvl3_AP2:
			zone_lvl3_AP2.player_near_lvl3_AP2.connect(_on_player_near_lvl3_AP2)
			print(\"Connected to dialogue signal: zone_lvl3_AP2\")
		var zone_lvl3_AP3 = get_node(\"/root/Map3/Lvl3Activators/APiece3\")
		if zone_lvl3_AP3:
			zone_lvl3_AP3.player_near_lvl3_AP3.connect(_on_player_near_lvl3_AP3)
			print(\"Connected to dialogue signal: zone_lvl3_AP3\")
		var zone_lvl3_end = get_node(\"/root/Map3/TileMapLayer2/Obstacles_Mural_Finished/Area2D\")
		if zone_lvl3_end:
			zone_lvl3_end.player_in_lvl3_finished_mural.connect(_on_player_near_lvl3_end)
			print(\"Connected to dialogue signal: zone_lvl3_end\")


	#lvlfinal1 readying
	elif root_name == \"MapFinal1\":
		lvlend_transition_final1 = $/root/MapFinal1/Player_Char2D/LvlTransitionOutFinal1
		var zone_lvlfinal_1 = get_node(\"/root/MapFinal1/LvlActivators_Final1/A1_Start\")
		if zone_lvlfinal_1:
			zone_lvlfinal_1.player_near_lvlfinal_1.connect(_on_player_near_lvlfinal_1)
			print(\"Connected to dialogue signal: player_near_lvlfinal_1\")


	#lvlfinal2 readying
	elif root_name == \"MapFinal2\":
		lvlend_transition_final2 = $/root/MapFinal2/Player_Char2D/LvlTransitionOutFinal2
		var zone_lvlfinal_2 = get_node(\"/root/MapFinal2/LvlActivators_Final2/A1_Start\")
		if zone_lvlfinal_2:
			zone_lvlfinal_2.player_near_lvlfinal_2.connect(_on_player_near_lvlfinal_2)
			print(\"Connected to dialogue signal: player_near_lvlfinal_2\")


# Lvl1 activator functions
func _on_player_nearby_Activator1():
	print(\"do_dialogue_trigger_action(testtrigger1)\")
	do_dialogue_trigger_action(\"testtrigger1\")
	# do material phase effect from shader, use tween to change parameter
	#var tween = get_tree().create_tween()
	#tween.tween_property(player_sprite.material, \"shader_parameter/DissolveValue\", 1, transition_time).set_trans(Tween.TRANS_LINEAR)
func _on_player_nearby_Activator2():
	print(\"do_dialogue_trigger_action(testtrigger2)\")
	do_dialogue_trigger_action(\"testtrigger2\")
func _on_player_nearby_Activator3():
	print(\"do_dialogue_trigger_action(testtrigger3)\")
	do_dialogue_trigger_action(\"testtrigger3\")
func _on_player_at_Piece1():
	print(\"do_dialogue_trigger_action(testtrigger4)\")
	do_dialogue_trigger_action(\"testtrigger4\")
func _on_player_at_Piece2():
	print(\"do_dialogue_trigger_action(testtrigger5)\")
	do_dialogue_trigger_action(\"testtrigger5\")
func _on_player_at_Piece3():
	print(\"do_dialogue_trigger_action(testtrigger6)\")
	do_dialogue_trigger_action(\"testtrigger6\")
func _on_player_at_Lvl1end():
	print(\"do_dialogue_trigger_action(testtrigger7)\")
	lvlend = \"lvlend1\"
	do_dialogue_trigger_action(\"testtrigger7\")

# Lvl2 activator functions
func _on_player_near_lvl2_A1():
	print(\"do_dialogue_trigger_action(testtrigger8)\")
	do_dialogue_trigger_action(\"testtrigger8\")
	# do material phase effect from shader, use tween to change parameter
	#var tween = get_tree().create_tween()
	#tween.tween_property(player_sprite.material, \"shader_parameter/DissolveValue\", 1, transition_time).set_trans(Tween.TRANS_LINEAR)
func _on_player_near_lvl2_AP1():
	print(\"do_dialogue_trigger_action(testtrigger9)\")
	do_dialogue_trigger_action(\"testtrigger9\")
func _on_player_near_lvl2_AP2():
	print(\"do_dialogue_trigger_action(testtrigger 10)\")
	do_dialogue_trigger_action(\"testtrigger 10\") #*NOTE naming
func _on_player_near_lvl2_AP3():
	print(\"do_dialogue_trigger_action(testtrigger11)\")
	do_dialogue_trigger_action(\"testtrigger11\")
func _on_player_near_lvl2_end():
	print(\"do_dialogue_trigger_action(testtrigger12)\")
	lvlend = \"lvlend2\"
	do_dialogue_trigger_action(\"testtrigger12\")

# Lvl3 activator functions
func _on_player_near_lvl3_A1():
	print(\"do_dialogue_trigger_action(testtrigger13)\")
	do_dialogue_trigger_action(\"testtrigger13\")
	# do material phase effect from shader, use tween to change parameter
	#var tween = get_tree().create_tween()
	#tween.tween_property(player_sprite.material, \"shader_parameter/DissolveValue\", 1, transition_time).set_trans(Tween.TRANS_LINEAR)
func _on_player_near_lvl3_AP1():
	print(\"do_dialogue_trigger_action(testtrigger14)\")
	do_dialogue_trigger_action(\"testtrigger14\")
func _on_player_near_lvl3_AP2():
	print(\"do_dialogue_trigger_action(testtrigger15)\")
	do_dialogue_trigger_action(\"testtrigger15\")
func _on_player_near_lvl3_AP3():
	print(\"do_dialogue_trigger_action(testtrigger16)\")
	do_dialogue_trigger_action(\"testtrigger16\")
func _on_player_near_lvl3_end():
	print(\"do_dialogue_trigger_action(testtrigger17)\")
	lvlend = \"lvlend3\"
	do_dialogue_trigger_action(\"testtrigger17\")

# LvlFinal activator functions
func _on_player_near_lvlfinal_1():
	print(\"do_dialogue_trigger_action(testtrigger18)\")
	lvlend = \"lvlfinal1\"
	do_dialogue_trigger_action(\"testtrigger18\")
func _on_player_near_lvlfinal_2():
	print(\"do_dialogue_trigger_action(testtrigger19)\")
	lvlend = \"lvlfinal2\"
	do_dialogue_trigger_action(\"testtrigger19\")



# Regular function to handle the button press signal
func _on_button_next_pressed() -> void:
	print(\"Button pressed!\")
	SfxUi.play_sfx_dialo()
	# Call the dialogue function to continue the process
	# If waiting on the button press, you'll handle the flow in do_dialogue_trigger_action
	dialogue_box.hide()  # Hide dialogue box until next step (for example)

# Function to load dialogue data from the CSV
func load_csv_dialogue_data():
	var file = FileAccess.open(textfile, FileAccess.READ)
	print(\"opening file at:\" + str(textfile))
	if not file:
		print(\"Failed to open CSV file!\")
		return
	
	var first_line = true
	while not file.eof_reached():
		var line = file.get_line()
		if first_line:  # Skip header line
			var thisdata_line = line.split(\";\")
			num_of_columns = thisdata_line.size()
			first_line = false
			continue

		var data_line = line.split(\";\")  # Splitting by comma
		#print(data_line)
		if data_line.size() < num_of_columns:
			continue  # Ignore malformed lines (like at end of file)

		var trigger = data_line[0]
		var character = data_line[1]
		var dialogue_text = data_line[2]
		var next_action = data_line[3]
		var cutscene_tag = data_line[4]

		# Store dialogue in list of tuples
		dialogue_data.append([trigger, character, dialogue_text, next_action, cutscene_tag])

	file.close()
	#print(dialogue_data)  # Debugging to check if it loaded correctly

# Function to trigger dialogue and wait for button presses before advancing
func do_dialogue_trigger_action(trigger: String) -> void:
	# Search through each row in dialogue_data to find trigger's row
	matched_row = []
	matched_index = -1
	for i in range(dialogue_data.size()):
		if dialogue_data[i][0] == trigger:
			matched_row = dialogue_data[i]
			matched_index = i
			break
	
	if matched_row == []:
		print(\"No dialogue found for trigger:\", trigger)
		return
	
	var expected_end = true
	while expected_end:
		if matched_row[3].to_lower() != \"yes\":
			expected_end = false
			dialoguebox_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(location_UI_icons % matched_row[1])
			next_button.text = \"Done.\"
			dialogue_box.show()
			Global.dialogue_box_open = true
			# Call the next action (await the button press before continuing)
			await wait_for_button_press()
			dialogue_box.hide()
			Global.dialogue_box_open = false
			if cutscene_called != \"\":
				if cutscene_called == \"lvlfinal2\":
					cutscene_called = \"\"
					#cutscene_holder.stop_cutscene() #end of game, level cutscene up with credits
				else:
					cutscene_called = \"\"
					cutscene_holder.stop_cutscene()
			if lvlend != \"\":
				do_lvl_end_change()
		else:
			dialoguebox_text.text = matched_row[2]  # Set dialogue text
			npc_icon.texture = load(location_UI_icons % matched_row[1])
			next_button.text = \"Next...\"
			if matched_row[4].to_lower() != \"\":
				cutscene_called = matched_row[4]
				cutscene_holder.start_cutscene(cutscene_called)
			dialogue_box.show()
			Global.dialogue_box_open = true
			await wait_for_button_press()
			matched_index += 1
			
			# Check if index is within bounds
			if matched_index < dialogue_data.size():
				do_dialogue_next_action(matched_index)
			else:
				print(\"Reached end of dialogue data.\")
				expected_end = false  # Stop loop if out of bounds

# Helper function to wait for the button press (using await instead of yield)
func wait_for_button_press() -> void:
	# Await until the button press signal is triggered
	await (next_button.pressed)
	# * NOTE: This button also has Shortcut event of N input key (see button)
	print(\"Proceeding to: next dialogue, or Done\")

# Function to populate the dialogue box with the next row's data
func do_dialogue_next_action(index: int):
	matched_row = dialogue_data[index]
	dialoguebox_text.text = matched_row[2]  # Set dialogue text
	npc_icon.texture = load(location_UI_icons % matched_row[1])

func do_lvl_end_change():
	if lvlend == \"lvlend1\":
		lvlend = \"\"
		lvlend_transition1.start_transition()
	if lvlend == \"lvlend2\":
		lvlend = \"\"
		lvlend_transition2.start_transition()
	if lvlend == \"lvlend3\":
		lvlend = \"\"
		lvlend_transition3.start_transition()
	if lvlend == \"lvlfinal1\":
		lvlend = \"\"
		lvlend_transition_final1.start_transition()
	if lvlend == \"lvlfinal2\":
		lvlend = \"\"
		lvlend_transition_final2.start_transition_creditroll()
"

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_ct7gv"]

[sub_resource type="InputEventKey" id="InputEventKey_cu2h3"]
physical_keycode = 78

[sub_resource type="Shortcut" id="Shortcut_to680"]
events = [SubResource("InputEventKey_cu2h3")]

[node name="DialogueBox" type="Control"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_4jsyf")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="DialogueBox" type="Panel" parent="CanvasLayer"]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -512.0
offset_top = -208.0
offset_right = 512.0
grow_horizontal = 2
grow_vertical = 0

[node name="DialogueText" type="RichTextLabel" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 272.0
offset_top = 16.0
offset_right = -40.0
offset_bottom = -80.0
grow_horizontal = 2
grow_vertical = 2
theme_override_fonts/normal_font = ExtResource("1_c2vmq")
theme_override_font_sizes/normal_font_size = 30
bbcode_enabled = true
text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."

[node name="CharIcon" type="TextureRect" parent="CanvasLayer/DialogueBox"]
layout_mode = 0
offset_left = 16.0
offset_top = 16.0
offset_right = 240.0
offset_bottom = 192.0
texture = SubResource("PlaceholderTexture2D_ct7gv")
expand_mode = 2
stretch_mode = 5

[node name="Button_Next" type="Button" parent="CanvasLayer/DialogueBox"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.75
anchor_top = 0.654
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -6.10352e-05
offset_top = -0.0320129
offset_right = -64.0
offset_bottom = -24.0
grow_horizontal = 2
grow_vertical = 2
theme_override_fonts/font = ExtResource("2_smiwi")
theme_override_font_sizes/font_size = 40
shortcut = SubResource("Shortcut_to680")
shortcut_in_tooltip = false
text = "Next..."

[connection signal="pressed" from="CanvasLayer/DialogueBox/Button_Next" to="." method="_on_button_next_pressed"]
